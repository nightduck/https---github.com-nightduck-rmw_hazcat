// Copyright 2022 Washington University in St Louis

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef HMA_ALLOCATOR_H
#define HMA_ALLOCATOR_H

#ifdef __cplusplus
extern "C"
{
#endif

#define _GNU_SOURCE

#include <assert.h>
#include <errno.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <sys/shm.h>
#include <sys/mman.h>

#define OFFSET_TO_PTR(a, o) (uint8_t *)a + o
#define PTR_TO_OFFSET(a, p) (uint8_t *)p - (uint8_t *)a

#define handle_error(msg) \
  do { perror(msg); exit(EXIT_FAILURE); } while (0)

#define MAX_POOL_SIZE   0x100000000

#define ALLOC_RING      0x000
#define ALLOC_TLSF      0x001
#define ALLOC_BEST_FIT  0x002
#define ALLOC_FIRST_FIT 0x003
#define ALLOC_HALF_FIT  0x004
#define ALLOC_STRAT     0x005   // Not for use, indicates max
#define NUM_STRATS      0x1

#define CPU             0x000
#define CUDA            0x001
#define DEVICE          0x002   // Not for use, indicates max
#define NUM_DEV_TYPES   0x2

/*
  // Copy paste at head of new allocators, so first 8 bytes can be cast as a hma_allocator
  union {
    struct
    {
      const int shmem_id;
      const uint16_t device_type;
      const uint16_t device_number;
      const uint16_t strategy;
    };
    struct hma_allocator untyped;
  };
*/

struct hma_allocator
{
  int shmem_id;
  union {   // Only allocators in same domain (same device) can use each other's memory
    struct {
      uint16_t device_type;
      uint16_t device_number;
    };
    uint32_t domain;
  };
  uint16_t strategy;
};

void * convert(
  void * ptr, size_t size, struct hma_allocator * alloc_src,
  struct hma_allocator * alloc_dest);

// TODO: Update documentation
// Don't call this outside this library
struct hma_allocator * create_shared_allocator(
  void * hint, size_t alloc_size, uint16_t strategy,
  uint16_t device_type, uint8_t device_number);

// TODO: Update documentation
// Do call this
struct hma_allocator * remap_shared_allocator(int shmem_id);

// Calls custom code to clean up existing memory pool, then unmaps the allocator itself
void unmap_shared_allocator(struct hma_allocator * alloc);

// copy_to, copy_from, and copy shouldn't get called on a CPU allocator, but they've been
// implemented here for completeness anyways
void cpu_copy_from(void * alloc_mem, void * cpu_mem, size_t size);
void cpu_copy_to(void * alloc_mem, void * cpu_mem, size_t size);
void cpu_copy(struct hma_allocator * dest_alloc, void * there, void * here, size_t size);

extern int (*allocate_fps[NUM_STRATS * NUM_DEV_TYPES])(void *, size_t);
extern void (*deallocate_fps[NUM_STRATS * NUM_DEV_TYPES])(void *, int);
extern void (*copy_from_fps[NUM_STRATS * NUM_DEV_TYPES])(void *, void *, size_t);
extern void (*copy_to_fps[NUM_STRATS * NUM_DEV_TYPES])(void *, void *, size_t);
extern void (*copy_fps[NUM_STRATS * NUM_DEV_TYPES])(struct hma_allocator *, void *, void *, size_t);
extern struct hma_allocator * (*remap_fps[NUM_STRATS * NUM_DEV_TYPES])(struct hma_allocator *);
extern void (*unmap_fps[NUM_STRATS * NUM_DEV_TYPES])(struct hma_allocator *);

// Converts offset generated by alloc's allocate function into a pointer to type
#define GET_PTR(alloc, type, offset) \
  (type*)((uint8_t*)alloc + offset)

// Requests an allocation from alloc of size size
#define ALLOCATE(alloc, size) \
  (allocate_fps[alloc->strategy * NUM_DEV_TYPES + alloc->device_type])(alloc, size)

// Deallocates memory at offset previously generated by alloc
#define DEALLOCATE(alloc, offset) \
  (deallocate_fps[alloc->strategy * NUM_DEV_TYPES + alloc->device_type])(alloc, offset)

// Copies main memory pointer at cpu_mem into alloc_mem in alloc's domain, of size size
#define COPY_TO(alloc, alloc_mem, cpu_mem, size) \
  (copy_to_fps[alloc->strategy * NUM_DEV_TYPES + alloc->device_type])(alloc_mem, cpu_mem, size)

// Copies alloc_mem in alloc to main memory pointer at cpu_mem, of size size
#define COPY_FROM(alloc, alloc_mem, cpu_mem, size) \
  (copy_from_fps[alloc->strategy * NUM_DEV_TYPES + alloc->device_type])(alloc_mem, cpu_mem, size)

// Copies from src_alloc's pointer at src_mem into dest_alloc's pointer at dest_mem, of size size
#define COPY(dest_alloc, dest_mem, src_alloc, src_mem, size) \
  (copy_fps[src_alloc->strategy * NUM_DEV_TYPES + src_alloc->device_type])( \
    dest_alloc, dest_mem, src_mem, size)
#ifdef __cplusplus
}
#endif

#endif // HMA_ALLOCATOR_H
